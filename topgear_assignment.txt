#####1.Python code to sort the URL in the list based on the top-level domain.
####
#####Url list initialization
##url = ["www.annauniv.edu", "www.google.com", "www.ndtv.com", "www.website.org", "www.bis.org.in", "www.rbi.org.in"]
##
###Function to sort in tld order
##def tld(url):
##	return url.split('.')[-1]
##
###Using sorted and calling function
##Output = sorted(url,key=tld)
##
###Printing output
##print("Initial list is :")
##print(url)
##print("sorted list according to TLD is")
##print(Output)


####2.Given a list of strings, return the count of the number of strings where the string length is 2 or more and the first and last chars of the string are the same.   
#### 
####i.	['axa', 'xyz', 'gg', 'x', 'yyy'] 
####ii.	['x', 'cd', 'cnc', 'kk'] 
####iii.['bab', 'ce', 'cba', 'syanora'] 
##
##list1=['axa', 'xyz', 'gg', 'x', 'yyy']
##list2=['x', 'cd', 'cnc', 'kk']
##list3=['bab', 'ce', 'cba', 'syanora']
##
##def x(tlist):
##	s_count=0
##	for ele in tlist:
##		if ( len(ele)>=2 ) and ( ele[0] == ele[-1] ):
##			sCount+=1
##	return sCount
## 
##print(x(list1))
##print(x(list2))
##print(x(list3))

#3.
'''Given a list of strings, return a list with the strings in sorted order,
   except group all the strings that begin with 'x' first.
   e.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields ['xanadu', 'xyz', 'aardvark', 'apple', 'mix'].  

   Hint: this can be done by making 2 lists and sorting each of them before combining them. 

   i. ['bbb', 'ccc', 'axx', 'xzz', 'xaa'] 
   ii.['mix', 'xyz', 'apple', 'xanadu', 'aardvark']'''
def fun(l):
    l1,l2=[],[]
    for i in l:
        if(i[0]=="x"):
            l1.append(i)
        else:
            l2.append(i)
    return sorted(l1)+sorted(l2)

k=fun(['bbb', 'ccc', 'axx', 'xzz', 'xaa'])
print(k)  
k=fun(["mix","xyz","apple","xanadu","aadvark"])
print(k)

##4. Given a list of non-empty tuples, return a list sorted in increasing order by the last element in each tuple. 
##e.g. [(1, 7), (1, 3), (3, 4, 5), (2, 2)] yields [(2, 2), (1, 3), (3, 4, 5), (1, 7)]
##  Hint: use a custom key= function to extract the last element form each tuple.
##i.  [(1, 3), (3, 2), (2, 1)]
##ii. [(1, 7), (1, 3), (3, 4, 5), (2, 2)]

##def cmp_items(a,b):
##    if(a[-1]>b[-1]):
##        return 1
##    elif(a[-1]==b[-1]):
##        return 0
##    else:
##        return -1
##
##
##l=[(1,3),(3,2),(2,1)]
##cmptokey=cmp_to_key(cmp_items)
##l.sort(key=cmptokey)
##print(l)



###5.Given a list of numbers, return a list where all adjacent == elements have been reduced to a single element, so [1, 2, 2, 3] returns [1, 2, 3]. You may create a new list or modify the passed in list. 
###i.[1, 2, 2, 3], [2, 2, 3, 3, 3] 
##

##def fun(l):
##    l1=[l[0]]
##    for i in l[1:]:
##        if(i==l1[-1]):
##            pass
##        else:
##            l1.append(i)
##    return l1
##    
##k=fun([1,2,2,3])
##print(k)
##k=fun([2,2,3,3,3])
##print(k)


#6. Write a function to print the information in the dictionary(bookstore) in the given format

##BOOKSTORE
##
##'Learning XML', 'Erik T. Ray', '2003', '39.95' 
##'Everyday Italian', 'Giada De Laurent is', '2005', '30.00']
##'Harry Potter', 'J K. Rowling', '2005', '29.99']

##bookstore = {"New Arrivals":{"COOKING":["Everyday Italian","Giada De Laurentiis","2005","30.00"],"CHILDREN":["Harry Potter","J K.Rowling","2005","29.99"],"WEB":["Learning XML","Erik T. Ray","2003","39.95"]}}
##print("\n\nBOOKSTORE\n\n")
##for dic1 in bookstore.values():
##	for lst in dic1.values():
##		strn=str(lst)
##		strn=strn[1:len(strn)-1]		
##		print(strn)
##
##print("\n\n")

#9.
##import re
##
##str1="""Interface		IP-Address	OK? 	Method Status	Protocol
## 
##FastEthernet0/0	192.168.1.242	YES 	manual up	up 
##FastEthernet1/0        unassigned	YES 	unset		down 
##Serial2/0              	192.168.1.250	YES 	manual up	up 
##Serial3/0              	192.168.1.233	YES 	manual up	up 
##FastEthernet4/0        unassigned	YES 	unset  		down	
##FastEthernet5/0        unassigned	YES        unset 		down"""
##
##
##
##
##print("\n\n\n")
##for line in str1.splitlines():
##
##
##	matchObj = re.match( r'(\w+\d\/\d)\s+[.0-9a-z]+\s+\w+\s+(\w+\s?\w+?)\s+\w+', line, re.M|re.I)
##
##
##	if matchObj:
##	   print(matchObj.group(1),",",matchObj.group(2),"\n")
##print("\n\n\n")
